		What happens when you initialize a repository? Why do you need to do it?

Initializing a repository is basically what creates it. If you don't do it it wont be in the git directory so you wont be able to commit any files. It also creates a .gitfile inside your folder. This is basically what controls and monitors what you are doing with the repository.

		How is the staging area different from the working directory and the repository?
		What value do you think it offers?
The working directory might not have been saved yet it is basically open and it is what you are working on. the repository is the whole thing it has been saved or added to and it might have a history. It also contains all the files and folders connected to what you are working on. Your working directory might just contain a couple of files that you are working on whereas the repository will contain everything connected.

		How can you use the staging area to make sure you have one commit per logical
		change?

you can check that by typing in git diff --staged to see the difference between that and the previously saved file version.				

		What are some situations when branches would be helpful in keeping your history
		organized? How would branches help?

having numerous working branches will help if you want to create a website and want to experiment with different fonts and colors and headers. Using branches will be very helpfull for experimentation.

		What are some situations when branches would be helpful in keeping your history
		How do the diagrams help you visualize the branch structure?

Diagrams help you visualise how many different branches you have created and how they are related to each other. It can help show if you have too many branches, it will also show he parentage of all the branches.

		What is the result of merging two branches together? Why do we represent it in
		the diagram the way we do?

The result is that the files are merged into one new one (this is usually the new master file) This is done because you might have wanted to experiment with one thing and not know if it would work decide that you liked it and wanted to incorporate the changes. Also if more than one person was working on a file you might want to combine your work together.

		What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
		manually?
There is always going to be a danger of conflicts when automatically merging whereas as manually merging is time consuming. The fact that git does have the ability to spot and highlight potential merge conflicts is however very useful.
